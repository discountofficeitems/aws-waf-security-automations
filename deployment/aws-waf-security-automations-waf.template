# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  (SO0006-ALB) - AWS WAF Security Automations - ALB %VERSION%: This AWS CloudFormation template helps
  you provision the AWS WAF Security Automations stack without worrying about creating and
  configuring the underlying AWS infrastructure.

  **WARNING** This template creates an AWS Lambda function, an AWS WAF Web ACL, an Amazon S3 bucket,
  and an Amazon CloudWatch custom metric. You will be billed for the AWS resources used if you
  create a stack from this template.

Parameters:
  ActivateSqlInjectionProtectionParam:
    Type: String
  ActivateCrossSiteScriptingProtectionParam:
    Type: String
  ActivateHttpFloodProtectionParam:
    Type: String
  ActivateScannersProbesProtectionParam:
    Type: String
  ActivateReputationListsProtectionParam:
    Type: String
  ActivateBadBotProtectionParam:
    Type: String
  AppAccessLogBucket:
    Type: String
  EndpointScope:
    Type: String
  RequestThreshold:
    Type: Number
  ParentStackName:
    Type: String
  WafLogBucket:
    Type: String
  GlueAccessLogsDatabase:
    Type: String
  GlueAppAccessLogsTable:
    Type: String
  GlueWafAccessLogsTable:
    Type: String

Conditions:
  SqlInjectionProtectionActivated: !Equals
    - !Ref ActivateSqlInjectionProtectionParam
    - 'yes'

  CrossSiteScriptingProtectionActivated: !Equals
    - !Ref ActivateCrossSiteScriptingProtectionParam
    - 'yes'

  HttpFloodProtectionRateBasedRuleActivated: !Equals
    - !Ref ActivateHttpFloodProtectionParam
    - 'yes - AWS WAF rate based rule'

  HttpFloodLambdaLogParser: !Equals
    - !Ref ActivateHttpFloodProtectionParam
    - 'yes - AWS Lambda log parser'

  HttpFloodAthenaLogParser: !Equals
    - !Ref ActivateHttpFloodProtectionParam
    - 'yes - Amazon Athena log parser'

  HttpFloodProtectionLogParserActivated: !Or
    - Condition: HttpFloodLambdaLogParser
    - Condition: HttpFloodAthenaLogParser

  ScannersProbesLambdaLogParser: !Equals
    - !Ref ActivateScannersProbesProtectionParam
    - 'yes - AWS Lambda log parser'

  ScannersProbesAthenaLogParser: !Equals
    - !Ref ActivateScannersProbesProtectionParam
    - 'yes - Amazon Athena log parser'

  ScannersProbesProtectionActivated: !Or
    - Condition: ScannersProbesLambdaLogParser
    - Condition: ScannersProbesAthenaLogParser

  LogParser: !Or
    - Condition: HttpFloodProtectionLogParserActivated
    - Condition: ScannersProbesProtectionActivated

  ReputationListsProtectionActivated: !Equals
    - !Ref ActivateReputationListsProtectionParam
    - 'yes'

  BadBotProtectionActivated: !Equals
    - !Ref ActivateBadBotProtectionParam
    - 'yes'

Resources:
  WAFWhitelistSet:
    Type: 'AWS::WAFv2::IPSet'
    Properties:
      Name: !Sub '${ParentStackName}-WhitelistSet'
      Scope: !Ref 'EndpointScope'
      Addresses: ['127.0.0.1/32']
      IPAddressVersion: 'IPV4'

  WAFBlacklistSet:
    Type: 'AWS::WAFv2::IPSet'
    Properties:
      Name: !Sub '${ParentStackName}-BlacklistSet'
      Scope: !Ref 'EndpointScope'
      Addresses: ['127.0.0.1/32']
      IPAddressVersion: 'IPV4'

  WAFHttpFloodSet:
    Type: 'AWS::WAFv2::IPSet'
    Condition: HttpFloodProtectionLogParserActivated
    Properties:
      Name: !Sub '${ParentStackName}-HttpFloodSet'
      Scope: !Ref 'EndpointScope'
      Addresses: ['127.0.0.1/32']
      IPAddressVersion: 'IPV4'

  WAFScannersProbesSet:
    Type: 'AWS::WAFv2::IPSet'
    Condition: ScannersProbesProtectionActivated
    Properties:
      Name: !Sub '${ParentStackName}-ScannersAndProbesSet'
      Scope: !Ref 'EndpointScope'
      Addresses: ['127.0.0.1/32']
      IPAddressVersion: 'IPV4'

  WAFReputationListsSet:
    Type: 'AWS::WAFv2::IPSet'
    Condition: ReputationListsProtectionActivated
    Properties:
      Name: !Sub '${ParentStackName}-IpReputationListsSet'
      Scope: !Ref 'EndpointScope'
      Addresses: ['127.0.0.1/32']
      IPAddressVersion: 'IPV4'

  WAFBadBotSet:
    Type: 'AWS::WAFv2::IPSet'
    Condition: BadBotProtectionActivated
    Properties:
      Name: !Sub '${ParentStackName}-IpBadBotSet'
      Scope: !Ref 'EndpointScope'
      Addresses: ['127.0.0.1/32']
      IPAddressVersion: 'IPV4'

  WAFSqlInjectionRule:
    Type: 'AWS::WAFv2::RuleGroup'
    Condition: SqlInjectionProtectionActivated
    Properties:
      Name: !Sub '${ParentStackName}-SqlInjectionRule'
      Scope: !Ref 'EndpointScope'
      Capacity: 500
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'SqlInjectionRule']]
      Rules:
        - Name: !Sub '${ParentStackName}-SqlInjectionRule-QueryString'
          Priority: 10
          Statement:
            XssMatchStatement:
              FieldToMatch: {QueryString: {}}
              TextTransformation:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
        - Name: !Sub '${ParentStackName}-SqlInjectionRule-Body'
          Priority: 10
          Statement:
            XssMatchStatement:
              FieldToMatch: {Body: {}}
              TextTransformation:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
        - Name: !Sub '${ParentStackName}-SqlInjectionRule-URI'
          Priority: 10
          Statement:
            XssMatchStatement:
              FieldToMatch: {UriPart: {}}
              TextTransformation:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
        - Name: !Sub '${ParentStackName}-SqlInjectionRule-Cookies'
          Priority: 10
          Statement:
            XssMatchStatement:
              FieldToMatch: {SingleHeader: {Name: 'Cookie'}}
              TextTransformation:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE

  WAFXssRule:
    Type: 'AWS::WAFv2::RuleGroup'
    Condition: CrossSiteScriptingProtectionActivated
    Properties:
      Name: !Sub '${ParentStackName}-XssRule'
      Scope: !Ref 'EndpointScope'
      Capacity: 500
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'XssRule']]
      Rules:
        - Name: !Sub '${ParentStackName}-XssRule-Query String'
          Priority: 10
          Statement:
            XssMatchStatement:
              FieldToMatch: {QueryString: {}}
              TextTransformation:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
        - Name: !Sub '${ParentStackName}-XssRule-Body'
          Priority: 10
          Statement:
            XssMatchStatement:
              FieldToMatch: {Body: {}}
              TextTransformation:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
        - Name: !Sub '${ParentStackName}-XssRule-URI'
          Priority: 10
          Statement:
            XssMatchStatement:
              FieldToMatch: {UriPart: {}}
              TextTransformation:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE
        - Name: !Sub '${ParentStackName}-XssRule-Cookies'
          Priority: 10
          Statement:
            XssMatchStatement:
              FieldToMatch: {SingleHeader: {Name: 'Cookie'}}
              TextTransformation:
                - Priority: 0
                  Type: URL_DECODE
                - Priority: 1
                  Type: HTML_ENTITY_DECODE

  WAFWebACL:
    Type: 'AWS::WAFv2::WebACL'
    Properties:
      Name: !Ref 'ParentStackName'
      Scope: !Ref 'EndpointScope'
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'MaliciousRequesters']]
      Rules:
        - Action:
            Allow: {}
          Name: !Sub '${ParentStackName}-WhitelistRule'
          Priority: 10
          Statement:
            IPSetReferenceStatement: !GetAtt WAFWhitelistSet.Arn
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'Whitelist']]
        - Action:
            Block: {}
          Name: !Sub '${ParentStackName}-BlacklistRule'
          Priority: 20
          Statement:
            IPSetReferenceStatement: !GetAtt WAFBlacklistSet.Arn
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'Blacklist']]
        - !If
            - SqlInjectionProtectionActivated
            - Action:
                Block: {}
              Name: !Sub '${ParentStackName}-SqlInjectionDetection'
              Priority: 30
              Statement:
                RuleGroupReferenceStatement:
                  Arn: !GetAtt WAFSqlInjectionRule.Arn
              VisibilityConfig:
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'SqlInjectionDetection']]
            - !Ref 'AWS::NoValue'
        - !If
            - CrossSiteScriptingProtectionActivated
            - Action:
                Block: {}
              Name: !Sub '${ParentStackName}-XssDetection'
              Priority: 40
              Statement:
                RuleGroupReferenceStatement:
                  Arn: !GetAtt WAFXssRule.Arn
              VisibilityConfig:
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'XssDetection']]
            - !Ref 'AWS::NoValue'
        - !If
            - HttpFloodProtectionRateBasedRuleActivated
            - Action:
                Block: {}
              Name: !Sub '${ParentStackName}-HttpFloodRateRule'
              Priority: 50
              Statement:
                RateBasedStatement:
                  AggregateKeyType: 'IP'
                  Limit: !Ref RequestThreshold
              VisibilityConfig:
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'HttpFloodRateRule']]
            - !Ref 'AWS::NoValue'
        - !If
            - HttpFloodProtectionLogParserActivated
            - Action:
                Block: {}
              Name: !Sub '${ParentStackName}-HttpFloodProtection'
              Priority: 55
              Statement:
                IPSetReferenceStatement: !Ref WAFHttpFloodSet
              VisibilityConfig:
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'HttpFloodProtection']]
            - !Ref 'AWS::NoValue'
        - !If
            - ScannersProbesProtectionActivated
            - Action:
                Block: {}
              Name: !Sub '${ParentStackName}-ScannersAndProbesSet'
              Priority: 60
              Statement:
                IPSetReferenceStatement: !Ref WAFScannersProbesSet
              VisibilityConfig:
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'ScannersAndProbes']]
            - !Ref 'AWS::NoValue'
        - !If
            - ReputationListsProtectionActivated
            - Action:
                Block: {}
              Name: !Sub '${ParentStackName}-IpReputationListsSet'
              Priority: 70
              Statement:
                IPSetReferenceStatement: !Ref WAFReputationListsSet
              VisibilityConfig:
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'IpReputationLists']]
            - !Ref 'AWS::NoValue'
        - !If
            - BadBotProtectionActivated
            - Action:
                Block: {}
              Name: !Sub '${ParentStackName}-IpBadBotSet'
              Priority: 90
              Statement:
                IPSetReferenceStatement: !Ref WAFBadBotSet
              VisibilityConfig:
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'BadBot']]
            - !Ref 'AWS::NoValue'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: 'F665'
            reason: This this a blacklist webACL

  LambdaRoleLogParser:
    Type: 'AWS::IAM::Role'
    Condition: LogParser
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - !If
          - ScannersProbesProtectionActivated
          - PolicyName: ScannersProbesProtectionActivatedAccess
            PolicyDocument:
              Statement:
                # S3 Resources
                - Effect: Allow
                  Action: 's3:GetObject'
                  Resource:
                    - !Sub 'arn:aws:s3:::${AppAccessLogBucket}/*'
                - Effect: Allow
                  Action: 's3:PutObject'
                  Resource:
                    - !Sub 'arn:aws:s3:::${AppAccessLogBucket}/${ParentStackName}-app_log_out.json'
                    - !Sub 'arn:aws:s3:::${AppAccessLogBucket}/${ParentStackName}-app_log_conf.json'
                # AWS WAF Resources
                - Effect: Allow
                  Action:
                    - 'wafv2:GetIPSet'
                    - 'wafv2:UpdateIPSet'
                  Resource:
                    - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:ipset/${WAFBlacklistSet}'
                    - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:ipset/${WAFScannersProbesSet}'
          - !Ref 'AWS::NoValue'
        - !If
          - ScannersProbesAthenaLogParser
          - PolicyName: ScannersProbesAthenaLogParserAccess
            PolicyDocument:
              Statement:
                # Athena Resources
                - Effect: Allow
                  Action:
                    - 'athena:GetNamedQuery'
                    - 'athena:StartQueryExecution'
                  Resource:
                    - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*'
                # S3 Resources
                - Effect: Allow
                  Action:
                    - 's3:GetBucketLocation'
                    - 's3:GetObject'
                    - 's3:ListBucket'
                    - 's3:ListBucketMultipartUploads'
                    - 's3:ListMultipartUploadParts'
                    - 's3:AbortMultipartUpload'
                    - 's3:CreateBucket'
                    - 's3:PutObject'
                  Resource:
                    - !Sub 'arn:aws:s3:::${AppAccessLogBucket}/athena_results/*'
                    - !Sub 'arn:aws:s3:::${AppAccessLogBucket}'
                # Glue Resources
                - Effect: Allow
                  Action:
                    - 'glue:GetTable'
                  Resource:
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueAccessLogsDatabase}'
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueAccessLogsDatabase}/${GlueAppAccessLogsTable}'
          - !Ref 'AWS::NoValue'
        - !If
          - HttpFloodProtectionLogParserActivated
          - PolicyName: HttpFloodProtectionLogParserActivatedAccess
            PolicyDocument:
              Statement:
                # S3 Resources
                - Effect: Allow
                  Action: 's3:GetObject'
                  Resource:
                    - !Sub 'arn:aws:s3:::${WafLogBucket}/*'
                - Effect: Allow
                  Action: 's3:PutObject'
                  Resource:
                    - !Sub 'arn:aws:s3:::${WafLogBucket}/${ParentStackName}-waf_log_out.json'
                    - !Sub 'arn:aws:s3:::${WafLogBucket}/${ParentStackName}-waf_log_conf.json'
                # AWS WAF Resources
                - Effect: Allow
                  Action:
                    - 'wafv2:GetIPSet'
                    - 'wafv2:UpdateIPSet'
                  Resource:
                    - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:ipset/${WAFBlacklistSet}'
                    - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:ipset/${WAFHttpFloodSet}'
          - !Ref 'AWS::NoValue'
        - !If
          - HttpFloodAthenaLogParser
          - PolicyName: HttpFloodAthenaLogParserAccess
            PolicyDocument:
              Statement:
                # Athena Resources
                - Effect: Allow
                  Action:
                    - 'athena:GetNamedQuery'
                    - 'athena:StartQueryExecution'
                  Resource:
                    - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*'
                # S3 Resources
                - Effect: Allow
                  Action:
                    - 's3:GetBucketLocation'
                    - 's3:GetObject'
                    - 's3:ListBucket'
                    - 's3:ListBucketMultipartUploads'
                    - 's3:ListMultipartUploadParts'
                    - 's3:AbortMultipartUpload'
                    - 's3:CreateBucket'
                    - 's3:PutObject'
                  Resource:
                    - !Sub 'arn:aws:s3:::${WafLogBucket}/athena_results/*'
                    - !Sub 'arn:aws:s3:::${WafLogBucket}'
                # Glue Resources
                - Effect: Allow
                  Action:
                    - 'glue:GetTable'
                  Resource:
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueAccessLogsDatabase}'
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueAccessLogsDatabase}/${GlueWafAccessLogsTable}'
          - !Ref 'AWS::NoValue'
        - PolicyName: WAFGetChangeToken
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'wafv2:GetChangeToken'
                Resource:
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:changetoken/*'
        - PolicyName: LogsAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*LogParser*'
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'cloudwatch:GetMetricStatistics'
                Resource:
                  - '*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          -
            id: W11
            reason: >-
              WAFGetChangeToken - restricted to WafArn/AccountId;
              LogsAccess - permission restricted to account, region and log group name substring (LogParser);
              CloudWatchAccess - this actions does not support resource-level permissions

  LambdaRoleReputationListsParser:
    Type: 'AWS::IAM::Role'
    Condition: ReputationListsProtectionActivated
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*ReputationListsParser*'
        - PolicyName: 'WAFGetChangeToken'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'wafv2:GetChangeToken'
                Resource:
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:changetoken/*'
        - PolicyName: WAFGetAndUpdateIPSet
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'wafv2:GetIPSet'
                  - 'wafv2:UpdateIPSet'
                Resource:
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:ipset/${WAFReputationListsSet}'
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'cloudformation:DescribeStacks'
                Resource:
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'cloudwatch:GetMetricStatistics'
                Resource:
                  - '*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          -
            id: W11
            reason: >-
              CloudWatchLogs - permission restricted to account, region and log group name substring (ReputationListsParser);
              WAFGetChangeToken - restricted to WafArn/AccountId;
              CloudFormationAccess - account, region and stack name;
              CloudWatchAccess - this actions does not support resource-level permissions

  LambdaRoleBadBot:
    Type: 'AWS::IAM::Role'
    Condition: BadBotProtectionActivated
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: WAFGetChangeToken
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'wafv2:GetChangeToken'
                Resource:
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:changetoken/*'
        - PolicyName: WAFGetAndUpdateIPSet
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'wafv2:GetIPSet'
                  - 'wafv2:UpdateIPSet'
                Resource:
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:ipset/${WAFBadBotSet}'
        - PolicyName: LogsAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*BadBotParser*'
        - PolicyName: 'CloudFormationAccess'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'cloudformation:DescribeStacks'
                Resource:
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'cloudwatch:GetMetricStatistics'
                Resource:
                  - '*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          -
            id: W11
            reason: >-
              WAFGetChangeToken - restricted to WafArn/AccountId;
              LogsAccess - permission restricted to account, region and log group name substring (BadBotParser);
              CloudFormationAccess - account, region and stack name;
              CloudWatchAccess - this actions does not support resource-level permissions

  LambdaRoleCustomResource:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3AccessGeneralAppAccessLog
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:CreateBucket'
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource:
                  - !Sub 'arn:aws:s3:::${AppAccessLogBucket}'
        - !If
          - HttpFloodProtectionLogParserActivated
          - PolicyName: S3AccessGeneralWafLog
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:CreateBucket'
                    - 's3:GetBucketNotification'
                    - 's3:PutBucketNotification'
                  Resource:
                    - !Sub 'arn:aws:s3:::${WafLogBucket}'
          - !Ref 'AWS::NoValue'
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${AppAccessLogBucket}'
        - !If
          - ScannersProbesLambdaLogParser
          - PolicyName: S3AppAccessPut
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action: 's3:PutObject'
                  Resource:
                    - !Sub 'arn:aws:s3:::${AppAccessLogBucket}/${ParentStackName}-app_log_conf.json'
          - !Ref 'AWS::NoValue'
        - !If
          - HttpFloodLambdaLogParser
          - PolicyName: S3WafAccessPut
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action: 's3:PutObject'
                  Resource:
                    - !Sub 'arn:aws:s3:::${WafLogBucket}/${ParentStackName}-waf_log_conf.json'
          - !Ref 'AWS::NoValue'
        - !If
          - ReputationListsProtectionActivated
          - PolicyName: LambdaAccess
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action: 'lambda:InvokeFunction'
                  Resource:
                    - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
          - !Ref 'AWS::NoValue'
        - PolicyName: WAFAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'wafv2:GetWebACL'
                  - 'wafv2:UpdateWebACL'
                Resource:
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:webacl/${WAFWebACL}'
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:rule/*'
        - PolicyName: 'WAFRuleAccess'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'wafv2:GetRule'
                  - 'wafv2:GetIPSet'
                  - 'wafv2:UpdateIPSet'
                Resource:
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:rule/*'
        - PolicyName: 'WAFIPSetAccess'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'wafv2:GetIPSet'
                  - 'wafv2:UpdateIPSet'
                Resource:
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:ipset/*'
        - !If
          - HttpFloodProtectionLogParserActivated
          - PolicyName: WAFLogsAccess
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'wafv2:PutLoggingConfiguration'
                    - 'wafv2:DeleteLoggingConfiguration'
                  Resource:
                    - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:webacl/${WAFWebACL}'
                - Effect: Allow
                  Action: 'iam:CreateServiceLinkedRole'
                  Resource:
                    - 'arn:aws:iam::*:role/aws-service-role/waf-regional.amazonaws.com/AWSServiceRoleForWAFRegionalLogging'
                  Condition:
                    StringLike:
                      iam:AWSServiceName: 'waf-regional.amazonaws.com'
          - !Ref 'AWS::NoValue'
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'cloudformation:DescribeStacks'
                Resource:
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
        - PolicyName: WAFGetChangeToken
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'wafv2:GetChangeToken'
                Resource:
                  - !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:changetoken/*'
        - PolicyName: LogsAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CustomResource*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          -
            id: W11
            reason: >-
              WAFAccess, WAFRuleAccess and WAFIPSetAccess - restricted to WafArn/AccountId;
              CloudFormationAccess - account, region and stack name;
              WAFGetChangeToken - restricted to WafArn/AccountId;
              LogsAccess - permission restricted to account, region and log group name substring (CustomResource);

Outputs:
  WAFWhitelistSet:
    Value: !Ref WAFWhitelistSet

  WAFBlacklistSet:
    Value: !Ref WAFBlacklistSet

  WAFHttpFloodSet:
    Value: !Ref WAFHttpFloodSet
    Condition: HttpFloodProtectionLogParserActivated

  WAFScannersProbesSet:
    Value: !Ref WAFScannersProbesSet
    Condition: ScannersProbesProtectionActivated

  WAFReputationListsSet:
    Value: !Ref WAFReputationListsSet
    Condition: ReputationListsProtectionActivated

  WAFBadBotSet:
    Value: !Ref WAFBadBotSet
    Condition: BadBotProtectionActivated

  WAFSqlInjectionRule:
    Value: !Ref WAFSqlInjectionRule
    Condition: SqlInjectionProtectionActivated

  WAFXssRule:
    Value: !Ref WAFXssRule
    Condition: CrossSiteScriptingProtectionActivated

  WAFWebACL:
    Value: !Ref WAFWebACL

  WAFWebACLArn:
    Value: !Sub 'arn:aws:wafv2:${AWS::Region}:${AWS::AccountId}:webacl/${WAFWebACL}'

  WAFWebACLMetricName:
    Value: !Join ['', [!Join ['', !Split ['-', !Ref ParentStackName]], 'MaliciousRequesters']]

  LambdaRoleLogParserArn:
    Value: !GetAtt LambdaRoleLogParser.Arn
    Condition: LogParser

  LambdaRoleReputationListsParserArn:
    Value: !GetAtt LambdaRoleReputationListsParser.Arn
    Condition: ReputationListsProtectionActivated

  LambdaRoleBadBotArn:
    Value: !GetAtt LambdaRoleBadBot.Arn
    Condition: BadBotProtectionActivated

  LambdaRoleCustomResourceArn:
    Value: !GetAtt LambdaRoleCustomResource.Arn
